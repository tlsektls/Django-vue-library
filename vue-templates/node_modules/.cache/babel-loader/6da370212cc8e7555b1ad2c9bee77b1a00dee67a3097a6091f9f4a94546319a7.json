{"ast":null,"code":"import axios from 'axios';\nimport { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    userInfo: null,\n    isLogin: false,\n    isLoginError: false\n  },\n  getters: {},\n  mutations: {\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    }\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      axios.post('http://127.0.0.1:8000/rest-auth/login/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        // 접근 성공시, 토근 값이 반환된다. (실제로는 토근과 함께 유저 id를 받아온다.)\n        // 토근을 헤더 정보에 포함시켜서 우저정보를 요청\n      });\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["axios","createStore","state","userInfo","isLogin","isLoginError","getters","mutations","loginSuccess","payload","loginError","logout","actions","login","dispatch","loginObj","post","then","res","modules"],"sources":["/Users/isg/Desktop/work/webstudy/Django-vue-library/vue-templates/src/store/index.js"],"sourcesContent":["import axios from 'axios';\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    userInfo:null,\n    isLogin: false,\n    isLoginError: false\n  },\n  getters: {\n  },\n  mutations: {\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      axios\n      .post('http://127.0.0.1:8000/rest-auth/login/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        // 접근 성공시, 토근 값이 반환된다. (실제로는 토근과 함께 유저 id를 받아온다.)\n        // 토근을 헤더 정보에 포함시켜서 우저정보를 요청\n      })\n    }\n  },\n  modules: {\n  }\n})\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACLC,QAAQ,EAAC,IAAI;IACbC,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE;EAChB,CAAC;EACDC,OAAO,EAAE,CACT,CAAC;EACDC,SAAS,EAAE;IACTC,YAAY,CAACN,KAAK,EAAEO,OAAO,EAAE;MAC3BP,KAAK,CAACE,OAAO,GAAG,IAAI;MACpBF,KAAK,CAACG,YAAY,GAAG,KAAK;MAC1BH,KAAK,CAACC,QAAQ,GAAGM,OAAO;IAC1B,CAAC;IACDC,UAAU,CAACR,KAAK,EAAE;MAChBA,KAAK,CAACE,OAAO,GAAG,KAAK;MACrBF,KAAK,CAACG,YAAY,GAAG,KAAK;MAC1BH,KAAK,CAACC,QAAQ,GAAG,IAAI;IACvB,CAAC;IACDQ,MAAM,CAACT,KAAK,EAAE;MACZA,KAAK,CAACE,OAAO,GAAG,KAAK;MACrBF,KAAK,CAACG,YAAY,GAAG,KAAK;MAC1BH,KAAK,CAACC,QAAQ,GAAG,IAAI;IACvB;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,KAAK,CAACC,QAAQ,EAAEC,QAAQ,EAAE;MACxBf,KAAK,CACJgB,IAAI,CAAC,wCAAwC,EAAED,QAAQ;MACxD;MAAA,CACCE,IAAI,CAACC,GAAG,IAAI;QACX;QACA;MAAA,CACD,CAAC;IACJ;EACF,CAAC;EACDC,OAAO,EAAE,CACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}