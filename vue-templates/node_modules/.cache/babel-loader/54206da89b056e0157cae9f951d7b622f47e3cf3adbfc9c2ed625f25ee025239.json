{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport axios from \"axios\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  //data 옵션의 기본 상태(state) 정의\n  state: {\n    userInfo: null,\n    //아직 정보를 받아오지 않은 상태이므로 null\n    isLogin: false,\n    //로그인이 되었다면 true로 변경\n    isLoginError: false\n  },\n  mutations: {\n    loginSuccess(state, payload) {\n      //로그인 성공시,\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n      //payload 에 대한 정보는 위키피디아를 참고했다. 쉽게 말해 userInfo에 배정되는 실제 유저 정보를 할당한다고 보면 된다.\n    },\n\n    loginError(state) {\n      //로그인 실패시,\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      //로그 아웃시,\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    }\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      // login --> 토큰 반환\n      axios.post(\"http://127.0.0.1:8000/api/rest-auth/login/\", loginObj)\n      // loginObj = {email,password}를 받아온다.\n      .then(res => {\n        // 접근 성공시, 토큰 값이 반환된다. (실제로는 토큰과 함께 유저 id를 받아온다.)\n        // 토큰을 헤더 정보에 포함시켜서 유저 정보를 요청\n        let token = res.data.token;\n        //토큰을 로컬 스토리지에 저장\n        localStorage.setItem(\"access_token\", token); //로컬 스토리지에 토큰 저장\n        this.dispatch(\"getMemberInfo\");\n        router.push({\n          name: \"home\"\n        });\n        console.log(res);\n      }).catch(() => {\n        alert(\"이메일과 비밀번호를 확인하세요.\");\n      });\n    },\n    logout({\n      commit\n    }) {\n      commit(\"logout\");\n      router.push({\n        name: \"home\"\n      });\n    },\n    signup(dispatch, loginObj) {\n      // login --> 토큰 반환\n      axios.post(\"http://127.0.0.1:8000/api/rest-auth/registration/\", loginObj)\n      // loginObj = {email,password}\n      .then(res => {\n        alert(\"회원가입이 성공적으로 이뤄졌습니다.\");\n        router.push({\n          name: \"login\"\n        });\n        console.log(res);\n      }).catch(() => {\n        alert(\"이메일과 비밀번호를 확인하세요.\");\n      });\n    },\n    getMemberInfo({\n      commit\n    }) {\n      //로컬 스토리지에 저장된 토큰을 저장한다.\n      let token = localStorage.getItem(\"access_token\");\n      let config = {\n        headers: {\n          \"access-token\": token\n        }\n      };\n      //토큰 -> 멤버 정보 반환\n      //새로고침 --> 토큰만 갖고 멤버 정보 요청가능\n      axios.get(\"http://127.0.0.1:8000/api/user/\", config).then(response => {\n        let userInfo = {\n          pk: response.data.data.pk,\n          username: response.data.data.username,\n          email: response.data.data.email\n        };\n        commit(\"loginSuccess\", userInfo);\n      }).catch(() => {\n        alert(\"이메일과 비밀번호를 확인하세요.\");\n      });\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","router","axios","use","Store","state","userInfo","isLogin","isLoginError","mutations","loginSuccess","payload","loginError","logout","actions","login","dispatch","loginObj","post","then","res","token","data","localStorage","setItem","push","name","console","log","catch","alert","commit","signup","getMemberInfo","getItem","config","headers","get","response","pk","username","email"],"sources":["/Users/isg/Desktop/work/webstudy/Django-vue-library/vue-templates/src/store/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport axios from \"axios\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  //data 옵션의 기본 상태(state) 정의\n  state: {\n    userInfo: null, //아직 정보를 받아오지 않은 상태이므로 null\n    isLogin: false, //로그인이 되었다면 true로 변경\n    isLoginError: false,\n  },\n  mutations: {\n    loginSuccess(state, payload) {\n      //로그인 성공시,\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n      //payload 에 대한 정보는 위키피디아를 참고했다. 쉽게 말해 userInfo에 배정되는 실제 유저 정보를 할당한다고 보면 된다.\n    },\n    loginError(state) {\n      //로그인 실패시,\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      //로그 아웃시,\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      // login --> 토큰 반환\n      axios\n        .post(\"http://127.0.0.1:8000/api/rest-auth/login/\", loginObj)\n        // loginObj = {email,password}를 받아온다.\n        .then((res) => {\n          // 접근 성공시, 토큰 값이 반환된다. (실제로는 토큰과 함께 유저 id를 받아온다.)\n          // 토큰을 헤더 정보에 포함시켜서 유저 정보를 요청\n          let token = res.data.token;\n          //토큰을 로컬 스토리지에 저장\n          localStorage.setItem(\"access_token\", token); //로컬 스토리지에 토큰 저장\n          this.dispatch(\"getMemberInfo\");\n          router.push({ name: \"home\" });\n          console.log(res);\n        })\n        .catch(() => {\n          alert(\"이메일과 비밀번호를 확인하세요.\");\n        });\n    },\n    logout({ commit }) {\n      commit(\"logout\");\n      router.push({ name: \"home\" });\n    },\n    signup(dispatch, loginObj) {\n      // login --> 토큰 반환\n      axios\n        .post(\"http://127.0.0.1:8000/api/rest-auth/registration/\", loginObj)\n        // loginObj = {email,password}\n        .then((res) => {\n          alert(\"회원가입이 성공적으로 이뤄졌습니다.\");\n          router.push({ name: \"login\" });\n          console.log(res);\n        })\n        .catch(() => {\n          alert(\"이메일과 비밀번호를 확인하세요.\");\n        });\n    },\n    getMemberInfo({ commit }) {\n      //로컬 스토리지에 저장된 토큰을 저장한다.\n      let token = localStorage.getItem(\"access_token\");\n      let config = {\n        headers: {\n          \"access-token\": token,\n        },\n      };\n      //토큰 -> 멤버 정보 반환\n      //새로고침 --> 토큰만 갖고 멤버 정보 요청가능\n      axios\n        .get(\"http://127.0.0.1:8000/api/user/\", config)\n        .then((response) => {\n          let userInfo = {\n            pk: response.data.data.pk,\n            username: response.data.data.username,\n            email: response.data.data.email,\n          };\n          commit(\"loginSuccess\", userInfo);\n        })\n        .catch(() => {\n          alert(\"이메일과 비밀번호를 확인하세요.\");\n        });\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}