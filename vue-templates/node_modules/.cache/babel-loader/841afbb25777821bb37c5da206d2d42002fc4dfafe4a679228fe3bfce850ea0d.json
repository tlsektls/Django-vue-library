{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport router from '@/router';\nimport axios from 'axios';\nimport { createStore } from 'vuex';\nexport default createStore({\n  globalInjection: true,\n  state: {\n    userInfo: null,\n    isLogin: false,\n    isLoginError: false\n  },\n  getters: {},\n  mutations: {\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    }\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      axios.post('http://127.0.0.1:8000/rest-auth/login/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        // 접근 성공시, 토근 값이 반환된다. (실제로는 토근과 함께 유저 id를 받아온다.)\n        // 토근을 헤더 정보에 포함시켜서 유저정보를 요청\n        let token = res.data.token;\n        localStorage.setItem('access_token', token);\n        this.dispatch('getUserInfo');\n        router.push({\n          name: \"home\"\n        });\n        console.log(res);\n      }).catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    },\n    logout({\n      commit\n    }) {\n      router.push({\n        name: \"home\"\n      });\n    },\n    signup(dispatch, loginObj) {\n      axios.post('http://127.0.0.1:8000/rest-auth/signup/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        alert('회원가입이 성공적으러 이뤄졌습니다.');\n        router.push({\n          name: \"login\"\n        });\n        console.log(res);\n      }).catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    },\n    logogetUserInfo({\n      commit\n    }) {\n      let token = localStorage.getItem(\"access_token\");\n      let config = {\n        headers: {\n          \"access-token\": token\n        }\n      };\n      axios.post('http://127.0.0.1:8000/user/login/', config)\n      // loginObj = {email, password}\n      .then(response => {\n        let userInfo = {\n          pk: response.data.data.pk,\n          username: response.data.data.username,\n          email: response.data.data.email\n        };\n        commit(\"loginSuccess\", userInfo);\n      }).catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["router","axios","createStore","globalInjection","state","userInfo","isLogin","isLoginError","getters","mutations","loginSuccess","payload","loginError","logout","actions","login","dispatch","loginObj","post","then","res","token","data","localStorage","setItem","push","name","console","log","catch","alert","commit","signup","logogetUserInfo","getItem","config","headers","response","pk","username","email","modules"],"sources":["/Users/isg/Desktop/work/webstudy/Django-vue-library/vue-templates/src/store/index.js"],"sourcesContent":["import router from '@/router';\nimport axios from 'axios';\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  globalInjection: true,\n  state: {\n    userInfo: null,\n    isLogin: false,\n    isLoginError: false\n  },\n  getters: {\n  },\n  mutations: {\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    loginError(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n    logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n  },\n  actions: {\n    login(dispatch, loginObj) {\n      axios\n      .post('http://127.0.0.1:8000/rest-auth/login/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        // 접근 성공시, 토근 값이 반환된다. (실제로는 토근과 함께 유저 id를 받아온다.)\n        // 토근을 헤더 정보에 포함시켜서 유저정보를 요청\n        let token = res.data.token;\n\n        localStorage.setItem('access_token', token);\n        this.dispatch('getUserInfo');\n        router.push({name: \"home\"});\n        console.log(res);\n      })\n      .catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    },\n    logout({ commit }) {\n      router.push({ name: \"home\" });\n    },\n    signup(dispatch, loginObj) {\n      axios\n      .post('http://127.0.0.1:8000/rest-auth/signup/', loginObj)\n      // loginObj = {email, password}\n      .then(res => {\n        alert('회원가입이 성공적으러 이뤄졌습니다.')\n        router.push({name: \"login\"});\n        console.log(res);\n      })\n      .catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    },\n    logogetUserInfo({ commit }) {\n      let token = localStorage.getItem(\"access_token\");\n      let config = {\n        headers: {\n          \"access-token\": token\n        }\n      };\n      axios\n      .post('http://127.0.0.1:8000/user/login/', config)\n      // loginObj = {email, password}\n      .then(response => {\n        let userInfo = {\n          pk: response.data.data.pk,\n          username: response.data.data.username,\n          email: response.data.data.email,\n        }\n        commit(\"loginSuccess\", userInfo);\n      })\n      .catch(() => {\n        alert('이메일과 비밀번호를 확인하세요.');\n      });\n    },\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}