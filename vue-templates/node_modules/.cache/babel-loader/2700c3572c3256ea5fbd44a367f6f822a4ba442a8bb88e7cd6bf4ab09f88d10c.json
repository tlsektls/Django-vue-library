{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\",\n  style: {\n    \"width\": \"500px\",\n    \"height\": \"400px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC,KAAK;EAACC,KAAiC,EAAjC;IAAA;IAAA;EAAA;;;uBAAdC,oBAAsD,OAAtDC,UAAsD","names":["id","style","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/Users/isg/Desktop/work/webstudy/Django-vue-library/vue-templates/src/components/inner/Map.vue"],"sourcesContent":["<template>\n  <div id=\"map\" style=\"width:500px;height:400px;\"></div>\n</template>\n\n\n<script>\n  import { getAPI } from '../../axios-api'\n  export default {\n    name: 'Map',\n    data () {\n      return {\n        MapData: [],\n      }\n    },\n    mounted() {\n      if (window.kakao && window.kakao.maps) {\n        this.initMap();\n      } else {\n        const script = document.createElement(\"script\");\n        /* global kakao */\n        script.onload = () => kakao.maps.load(this.initMap);\n        script.src = \"//dapi.kakao.com/v2/maps/sdk.js?&appkey=c39b70c857a7f27e0adc5039c85b7e66\";\n\n        document.head.appendChild(script);\n      }\n    },\n    methods: {\n      initMap() {\n        const container = document.getElementById(\"map\");\n        const options = { //지도를 생성할 때 필요한 기본 옵션\n          center: new kakao.maps.LatLng(33.450701, 126.570667), //지도의 중심좌표.\n          level: 3 //지도의 레벨(확대, 축소 정도)\n        };\n\n        //지도 객체를 등록합니다.\n        //지도 객체는 반응형 관리 대상이 아니므로 initMap에서 선언합니다.\n        this.map = new kakao.maps.Map(container, options);\n        \n        // 주소-좌표 변환 객체를 생성합니다\n        var geocoder = new kakao.maps.services.Geocoder();\n\n        // 주소로 좌표를 검색합니다\n        geocoder.addressSearch('경기 용인시 기흥구 흥덕1로 13 흥덕IT밸리', function(result, status) {\n          // 정상적으로 검색이 완료됐으면 \n          if (status === kakao.maps.services.Status.OK) {\n            var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\n\n            // 결과값으로 받은 위치를 마커로 표시합니다\n            var marker = new kakao.maps.Marker({\n                map: map,\n                position: coords\n            });\n\n            // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\n            this.map.setCenter(coords);\n          }\n        });    \n      },\n      displayMarker(markerPositions) {\n        if (this.markers.length > 0) {\n          this.markers.forEach((marker) => marker.setMap(null));\n        }\n\n        const positions = markerPositions.map(\n          (position) => new kakao.maps.LatLng(...position)\n        );\n\n        if (positions.length > 0) {\n          this.markers = positions.map(\n            (position) =>\n              new kakao.maps.Marker({\n                map: this.map,\n                position,\n              })\n          );\n\n          const bounds = positions.reduce(\n            (bounds, latlng) => bounds.extend(latlng),\n            new kakao.maps.LatLngBounds()\n          );\n\n          this.map.setBounds(bounds);\n        }\n      },\n    },\n    //created () {\n    //  getAPI.get('/map/',)\n    //    .then(response => {\n    //      console.log(response)\n    //      console.log('Map API has recieved data')\n    //      this.MapData = response.data\n    //    })\n    //    .catch(err => {\n    //      console.log('Map' + err)\n    //    })\n    //}\n  }\n</script>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}